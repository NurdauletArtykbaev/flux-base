<?php

namespace Nurdaulet\FluxBase\Filament\Resources;


use Nurdaulet\FluxBase\Filament\Resources\WebSiteConfigResource\Pages;
use Filament\Forms;
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Form;
use Filament\Resources\Resource;
use Filament\Resources\Table;
use Filament\Tables;

class WebSiteConfigResource extends Resource
{

//    protected static ?string $model = WebSiteConfig::class;
    public static function getModel(): string
    {

        return config('flux-base.models.web_site_config');
//        return parent::getModel(); // TODO: Change the autogenerated stub
    }

    protected static ?string $modelLabel = 'Конфиг сайта';
    protected static ?string $pluralModelLabel = 'Конфиг сайта';

    protected static ?string $navigationIcon = 'heroicon-o-menu';


    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Textarea::make('config')
                    ->label('Конфиг'),
                Forms\Components\Select::make('font')
                    ->options([ 'Advent Pro',
                        'Alegreya' => 'Alegreya',
                        'Alumni Sans' => 'Alumni Sans',
                        'Bitter' => 'Bitter',
                        'Commissioner' => 'Commissioner',
                        'Exo 2' => 'Exo 2',
                        'Fira Sans' => 'Fira Sans',
                        'Fira Sans Condensed' => 'Fira Sans Condensed',
                        'Fira Sans Extra Condensed' => 'Fira Sans Extra Condensed',
                        'Geologica' => 'Geologica',
                        'Golos Text' => 'Golos Text',
                        'Handjet' => 'Handjet',
                        'Hanken Grotesk' => 'Hanken Grotesk',
                        'Inter' => 'Inter',
                        'Inter Tight' => 'Inter Tight',
                        'Literata' => 'Literata',
                        'Montserrat' => 'Montserrat',
                        'Montserrat Alternates' => 'Montserrat Alternates',
                        'Mulish' => 'Mulish',
                        'Murecho' => 'Murecho',
                        'Noto Sans' => 'Noto Sans',
                        'Noto Sans Display' => 'Noto Sans Display',
                        'Noto Sans Mono' => 'Noto Sans Mono',
                        'Noto Serif' => 'Noto Serif',
                        'Noto Serif Display' => 'Noto Serif Display',
                        'Nunito' => 'Nunito',
                        'Nunito Sans',
                        'Onest' => 'Onest',
                        'Overpass' => 'Overpass',
                        'Phudu' => 'Phudu',
                        'Piazzolla' => 'Piazzolla',
                        'Playfair' => 'Playfair',
                        'Raleway' => 'Raleway',
                        'Recursive' => 'Recursive',
                        'Roboto Condensed' => 'Roboto Condensed',
                        'Roboto Serif' => 'Roboto Serif',
                        'Roboto Slab' => 'Roboto Slab',
                        'Rubik' => 'Rubik',
                        'Sofia Sans' => 'Sofia Sans',
                        'Sofia Sans Condensed' => 'Sofia Sans Condensed',
                        'Sofia Sans Extra Condensed' => 'Sofia Sans Extra Condensed',
                        'Sofia Sans Semi Condensed' => 'Sofia Sans Semi Condensed',
                        'Source Code Pro' => 'Source Code Pro',
                        'Source Sans 3' => 'Source Sans 3',
                        'Source Serif 4' => 'Source Serif 4',
                        'Tektur' => 'Tektur',
                        'Unbounded' => 'Unbounded',
                        'Vollkorn' => 'Vollkorn',
                        'Ysabeau' => 'Ysabeau',
                        'Ysabeau Infant' => 'Ysabeau Infant',
                        'Ysabeau Office' => 'Ysabeau Office',
                        'Ysabeau SC' => 'Ysabeau SC',
                    ])
                    ->label('Шрифт'),
                Forms\Components\FileUpload::make('logo_primary')
                    ->image()
                    ->disk('s3')
                    ->visibility('public')
                    ->directory('logo')
                    ->label(trans('admin.logo_primary')),
                Forms\Components\FileUpload::make('logo_secondary')
                    ->image()
                    ->disk('s3')
                    ->visibility('public')
                    ->directory('logo')
                    ->label(trans('admin.logo_secondary')),
                Forms\Components\FileUpload::make('design')
                    ->disk('s3')
                    ->visibility('public')
                    ->directory('design')
                    ->label(trans('admin.design_token')),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('config')
                    ->label(trans('admin.value'))
                    ->limit(150)
                    ->searchable(),
                Tables\Columns\ImageColumn::make('logo_primary')
                    ->width(150)
                    ->height(150)
                    ->disk('s3')
                    ->label(trans('admin.logo_primary')),
                Tables\Columns\ImageColumn::make('logo_secondary')
                    ->width(150)
                    ->height(150)
                    ->disk('s3')
                    ->label(trans('admin.logo_secondary')),
            ])
            ->filters([
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\DeleteBulkAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
        ];
    }


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListWebSiteConfig::route('/'),
            'create' => Pages\CreateWebSiteConfig::route('/create'),
            'edit' => Pages\EditWebSiteConfig::route('/{record}/edit'),
        ];
    }
}
